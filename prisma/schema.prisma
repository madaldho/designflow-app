generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  phone            String?
  password         String
  avatar           String?
  role             String         @default("requester")
  status           String         @default("active")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  activities       Activity[]
  annotations      Annotation[]
  approvals        Approval[]
  notifications    Notification[]
  pickupLogs       PickupLog[]
  printJobs        PrintJob[]
  approverProjects Project[]      @relation("ProjectApprover")
  assignedProjects Project[]      @relation("ProjectAssignee")
  projects         Project[]      @relation("ProjectCreator")
  reviewerProjects Project[]      @relation("ProjectReviewer")
  proofs           Proof[]        @relation("ProofUploadedBy")
  reviews          Review[]       @relation("ReviewedBy")
  institutions     Institution[]  @relation("InstitutionToUser")
}

model Institution {
  id        String    @id @default(cuid())
  name      String
  type      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  users     User[]    @relation("InstitutionToUser")
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String?
  brief         String?
  type          String
  size          String
  quantity      Int
  deadline      DateTime
  status        String         @default("draft")
  version       Int            @default(1)
  createdById   String
  institutionId String
  assigneeId    String?
  reviewerId    String?
  approverId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activities    Activity[]
  approvals     Approval[]
  pickupLogs    PickupLog[]
  printJobs     PrintJob[]
  approver      User?          @relation("ProjectApprover", fields: [approverId], references: [id])
  assignee      User?          @relation("ProjectAssignee", fields: [assigneeId], references: [id])
  createdBy     User           @relation("ProjectCreator", fields: [createdById], references: [id], onDelete: Cascade)
  institution   Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  reviewer      User?          @relation("ProjectReviewer", fields: [reviewerId], references: [id])
  assets        ProjectAsset[]
  proofs        Proof[]
  reviews       Review[]
}

model ProjectAsset {
  id         String   @id @default(cuid())
  projectId  String
  type       String
  name       String
  url        String
  mimeType   String
  size       Int
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Proof {
  id           String       @id @default(cuid())
  projectId    String
  version      Int
  fileUrl      String
  fileName     String
  fileSize     Int
  mimeType     String
  notes        String?
  isFinal      Boolean      @default(false)
  uploadedById String
  uploadedAt   DateTime     @default(now())
  annotations  Annotation[]
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User         @relation("ProofUploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)
  reviews      Review[]
}

model Annotation {
  id          String   @id @default(cuid())
  proofId     String
  type        String
  coordinates String
  comment     String?
  status      String   @default("active")
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  proof       Proof    @relation(fields: [proofId], references: [id], onDelete: Cascade)
}

model Review {
  id             String    @id @default(cuid())
  proofId        String
  projectId      String
  reviewerId     String
  decision       String    @default("pending")
  comment        String?
  changeRequests String?
  checklistState String?
  reviewedAt     DateTime?
  createdAt      DateTime  @default(now())
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  proof          Proof     @relation(fields: [proofId], references: [id], onDelete: Cascade)
  reviewer       User      @relation("ReviewedBy", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Approval {
  id         String    @id @default(cuid())
  projectId  String
  approverId String
  status     String    @default("pending")
  comment    String?
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  approver   User      @relation(fields: [approverId], references: [id], onDelete: Cascade)
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PrintJob {
  id              String    @id @default(cuid())
  projectId       String
  status          String    @default("queued")
  startedAt       DateTime?
  completedAt     DateTime?
  estimatedFinish DateTime?
  notes           String?
  printer         String?
  actualCost      Int?
  createdById     String
  createdAt       DateTime  @default(now())
  createdBy       User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model PickupLog {
  id               String   @id @default(cuid())
  projectId        String
  takerName        String
  takerInstitution String?
  takerPhone       String?
  notes            String?
  confirmedById    String
  pickedUpAt       DateTime @default(now())
  confirmedBy      User     @relation(fields: [confirmedById], references: [id], onDelete: Cascade)
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  userId      String
  projectId   String?
  metadata    String?
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?
  read      Boolean   @default(false)
  channels  String    @default("email")
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChecklistTemplate {
  id            String          @id @default(cuid())
  name          String
  description   String?
  isDefault     Boolean         @default(false)
  applicableFor String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  items         ChecklistItem[]
}

model ChecklistItem {
  id          String            @id @default(cuid())
  templateId  String
  title       String
  description String?
  required    Boolean           @default(false)
  category    String
  order       Int
  createdAt   DateTime          @default(now())
  template    ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
